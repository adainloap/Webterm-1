cat > app/build.gradle <<'EOF'
/*
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.xml.MarkupBuilder

plugins {
    id 'com.android.application'
}

def twaManifest = [
    applicationId: 'com.onrender.webterm_6e21.twa',
    hostName: 'webterm-6e21.onrender.com',
    launchUrl: '/login',
    name: 'WebTerminal',
    launcherName: 'WebTerm',
    themeColor: '#4A90E2',
    themeColorDark: '#000000',
    navigationColor: '#000000',
    navigationColorDark: '#000000',
    navigationDividerColor: '#000000',
    navigationDividerColorDark: '#000000',
    backgroundColor: '#121212',
    enableNotifications: true,
    shortcuts: [],
    splashScreenFadeOutDuration: 300,
    generatorApp: 'bubblewrap-cli',
    fallbackType: 'customtabs',
    enableSiteSettingsShortcut: 'true',
    orientation: 'any',
]

android {
    compileSdkVersion 36
    namespace "com.onrender.webterm_6e21.twa"
    defaultConfig {
        applicationId "com.onrender.webterm_6e21.twa"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 2
        versionName "2"

        resValue "string", "appName", twaManifest.name
        resValue "string", "launcherName", twaManifest.launcherName
        def launchUrl = "https://" + twaManifest.hostName + twaManifest.launchUrl
        resValue "string", "launchUrl", launchUrl
        resValue "string", "webManifestUrl", 'https://webterm-6e21.onrender.com/manifest.json'
        resValue "string", "fullScopeUrl", 'https://webterm-6e21.onrender.com/'
        resValue "string", "hostName", twaManifest.hostName
        resValue "color", "colorPrimary", twaManifest.themeColor
        resValue "color", "colorPrimaryDark", twaManifest.themeColorDark
        resValue "color", "navigationColor", twaManifest.navigationColor
        resValue "color", "navigationColorDark", twaManifest.navigationColorDark
        resValue "color", "navigationDividerColor", twaManifest.navigationDividerColor
        resValue "color", "navigationDividerColorDark", twaManifest.navigationDividerColorDark
        resValue "color", "backgroundColor", twaManifest.backgroundColor
        resValue "string", "providerAuthority", twaManifest.applicationId + '.fileprovider'
        resValue "bool", "enableNotification", twaManifest.enableNotifications.toString()
        twaManifest.shortcuts.eachWithIndex { shortcut, index ->
            resValue "string", "shortcut_name_$index", "$shortcut.name"
            resValue "string", "shortcut_short_name_$index", "$shortcut.short_name"
        }
        resValue "integer", "splashScreenFadeOutDuration", twaManifest.splashScreenFadeOutDuration.toString()
        resValue "string", "generatorApp", twaManifest.generatorApp
        resValue "string", "fallbackType", twaManifest.fallbackType
        resValue "bool", "enableSiteSettingsShortcut", twaManifest.enableSiteSettingsShortcut
        resValue "string", "orientation", twaManifest.orientation
    }
    buildTypes {
        release {
            minifyEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
    }
}

task generateShorcutsFile {
    assert twaManifest.shortcuts.size() < 5, "You can have at most 4 shortcuts."
    twaManifest.shortcuts.eachWithIndex { s, i ->
        assert s.name != null, 'Missing `name` in shortcut #' + i
        assert s.short_name != null, 'Missing `short_name` in shortcut #' + i
        assert s.url != null, 'Missing `icon` in shortcut #' + i
        assert s.icon != null, 'Missing `url` in shortcut #' + i
    }
    def shortcutsFile = new File("$projectDir/src/main/res/xml", "shortcuts.xml")
    def xmlWriter = new StringWriter()
    def xmlMarkup = new MarkupBuilder(new IndentPrinter(xmlWriter, "    ", true))
    xmlMarkup
        .'shortcuts'('xmlns:android': 'http://schemas.android.com/apk/res/android') {
            twaManifest.shortcuts.eachWithIndex { s, i ->
                'shortcut'(
                        'android:shortcutId': 'shortcut' + i,
                        'android:enabled': 'true',
                        'android:icon': '@drawable/' + s.icon,
                        'android:shortcutShortLabel': '@string/shortcut_short_name_' + i,
                        'android:shortcutLongLabel': '@string/shortcut_name_' + i) {
                    'intent'(
                            'android:action': 'android.intent.action.MAIN',
                            'android:targetPackage': twaManifest.applicationId,
                            'android:targetClass': twaManifest.applicationId + '.LauncherActivity',
                            'android:data': s.url)
                    'categories'('android:name': 'android.intent.category.LAUNCHER')
                }
            }
        }
    shortcutsFile.text = xmlWriter.toString() + '\n'
}

preBuild.dependsOn(generateShorcutsFile)

repositories {
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.androidbrowserhelper:locationdelegation:2.4.0'
    implementation 'com.google.androidbrowserhelper:androidbrowserhelper:2.6.2'
}
EOF
